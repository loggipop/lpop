name: Test Keychain Native Module

on:
  push:
    branches: [ main, "17-keychain-entries-team-id-code-signing" ]
    paths:
      - 'packages/keychain-native/**'
      - '.github/workflows/test-keychain-native.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'packages/keychain-native/**'
      - '.github/workflows/test-keychain-native.yml'

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  test-rust:
    name: Rust Tests
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
        rust: [stable, nightly]
    runs-on: ${{ matrix.os }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}
    
    - name: Cache Cargo
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          packages/keychain-native/target
        key: ${{ runner.os }}-cargo-${{ matrix.rust }}-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-${{ matrix.rust }}-
          ${{ runner.os }}-cargo-
    
    - name: Run Rust Tests
      working-directory: packages/keychain-native
      run: |
        cargo test --lib -- --nocapture
        cargo test --tests -- --nocapture
    
    - name: Run Rust Doctests
      working-directory: packages/keychain-native
      run: cargo test --doc

  test-node:
    name: Node.js Tests
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
        node: [20, 22]
    runs-on: ${{ matrix.os }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Bun
      uses: oven-sh/setup-bun@v1
      with:
        bun-version: latest
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Install dependencies
      run: bun install
    
    - name: Build Native Module
      working-directory: packages/keychain-native
      run: bun run build
    
    - name: Run TypeScript Tests
      working-directory: packages/keychain-native
      run: bun test
    
    - name: Upload test results
      if: failure()
      uses: actions/upload-artifact@v3
      with:
        name: test-results-${{ matrix.os }}-node${{ matrix.node }}
        path: packages/keychain-native/test-results/

  test-macos-signed:
    name: macOS Signed Build Test
    runs-on: macos-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Bun
      uses: oven-sh/setup-bun@v1
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Import Code Signing Certificate
      if: secrets.APPLE_CERTIFICATE_BASE64 != ''
      env:
        CERTIFICATE_BASE64: ${{ secrets.APPLE_CERTIFICATE_BASE64 }}
        CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
      run: |
        echo "$CERTIFICATE_BASE64" | base64 --decode > certificate.p12
        security create-keychain -p actions temp.keychain
        security import certificate.p12 -k temp.keychain -P "$CERTIFICATE_PASSWORD" -T /usr/bin/codesign
        security list-keychains -s temp.keychain
        security default-keychain -s temp.keychain
        security unlock-keychain -p actions temp.keychain
        security set-key-partition-list -S apple-tool:,apple: -s -k actions temp.keychain
    
    - name: Build and Sign Native Module
      working-directory: packages/keychain-native
      env:
        APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
      run: |
        bun run build
        if [ -n "$APPLE_TEAM_ID" ]; then
          codesign --force --sign "$APPLE_TEAM_ID" --timestamp keychain-native.*.node
        fi
    
    - name: Run Signed Build Tests
      working-directory: packages/keychain-native
      env:
        LPOP_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
      run: bun test -- --grep "team ID|code signing"
    
    - name: Cleanup Keychain
      if: always()
      run: |
        security delete-keychain temp.keychain || true
        rm -f certificate.p12

  lint:
    name: Lint
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy
    
    - name: Check Rust Formatting
      working-directory: packages/keychain-native
      run: cargo fmt -- --check
    
    - name: Run Clippy
      working-directory: packages/keychain-native
      run: cargo clippy -- -D warnings

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Install tarpaulin
      run: cargo install cargo-tarpaulin
    
    - name: Run Coverage
      working-directory: packages/keychain-native
      run: cargo tarpaulin --out Xml --output-dir coverage
    
    - name: Upload Coverage
      uses: codecov/codecov-action@v3
      with:
        files: packages/keychain-native/coverage/cobertura.xml
        flags: rust
        name: keychain-native-rust